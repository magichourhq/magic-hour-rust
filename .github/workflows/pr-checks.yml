name: checks

on:
  pull_request:
    types: [opened, synchronize, labeled, unlabeled]

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Generate a token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: 1057549 # https://github.com/organizations/magichourhq/settings/apps/magic-hour-sdk-bot
          private-key: ${{ secrets.SDK_GENERATOR_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: ensure lockfile is up to date
        run: cargo build

      - name: Get current version from main
        run: |
          git fetch origin main
          MAIN_VERSION=$(git show origin/main:Cargo.toml | grep '^version =' | cut -d'"' -f2)
          echo "MAIN_VERSION=$MAIN_VERSION" >> $GITHUB_ENV

      - name: Determine version bump type
        id: bump-type
        run: |
          if [[ $(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name' | grep -c "major") -gt 0 ]]; then
            echo "TYPE=major" >> $GITHUB_OUTPUT
          elif [[ $(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name' | grep -c "minor") -gt 0 ]]; then
            echo "TYPE=minor" >> $GITHUB_OUTPUT
          elif [[ $(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name' | grep -c "patch") -gt 0 ]]; then
            echo "TYPE=patch" >> $GITHUB_OUTPUT
          else
            echo "TYPE=none" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Bump version
        if: steps.bump-type.outputs.TYPE != 'none'
        run: |
          VERSION_PARTS=(${MAIN_VERSION//./ })
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          if [ "${{ steps.bump-type.outputs.TYPE }}" == "major" ]; then
            NEW_VERSION="$((MAJOR + 1)).0.0"
          elif [ "${{ steps.bump-type.outputs.TYPE }}" == "minor" ]; then
            NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
          else
            NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
          fi

          sed -i "s/^version = \".*\"/version = \"$NEW_VERSION\"/" Cargo.toml

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Configure git user
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'

      - name: Commit changes
        run: |
          git add .
          git commit -m "chore: version bump" || echo "No changes to commit"
          git push
