/// Generated by Sideko (sideko.dev)
#[derive(Clone, Debug)]
pub struct AiPhotoEditorClient {
    base_client: crate::core::base_client::BaseClient,
}
impl AiPhotoEditorClient {
    pub(crate) fn new(base_client: crate::core::base_client::BaseClient) -> Self {
        Self { base_client }
    }
    /// > **NOTE**: this API is still in early development stages, and should be avoided. Please reach out to us if you're interested in this API.
    ///
    /// Edit photo using AI. Each photo costs 10 frames.
    ///
    /// POST /v1/ai-photo-editor
    pub async fn create(
        &self,
        request: super::request_types::CreateRequest,
    ) -> crate::SdkResult<crate::models::PostV1AiPhotoEditorResponse> {
        let url = self.base_client.build_url("/v1/ai-photo-editor");
        let mut builder = reqwest::Client::default().post(&url);
        builder = builder.header("x-sideko-sdk-language", "rust");
        builder = builder.header("content-type", "application/json");
        builder = builder.json(&request.data);
        builder = self.base_client.apply_auths_to_builder(builder, &["bearerAuth"]);
        let mut response = builder.send().await?;
        response = self.base_client.error_for_status(response).await?;
        crate::core::response::process_json::<
            crate::models::PostV1AiPhotoEditorResponse,
        >(response)
            .await
    }
}
