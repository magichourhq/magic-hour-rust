/// Generated by Sideko (sideko.dev)
#[derive(Clone, Debug)]
pub struct ImageProjectsClient {
    base_client: crate::core::base_client::BaseClient,
}
impl ImageProjectsClient {
    pub(crate) fn new(base_client: crate::core::base_client::BaseClient) -> Self {
        Self { base_client }
    }
    /// Get the details of a image project. The `download` field will be `null` unless the image was successfully rendered.
    ///
    /// The image can be one of the following status
    /// - `draft` - not currently used
    /// - `queued` - the job is queued and waiting for a GPU
    /// - `rendering` - the generation is in progress
    /// - `complete` - the image is successful created
    /// - `error` - an error occurred during rendering
    /// - `canceled` - image render is canceled by the user
    ///
    pub async fn get(
        &self,
        request: super::request_types::GetRequest,
    ) -> crate::SdkResult<crate::models::GetV1ImageProjectsIdResponse> {
        let url = self
            .base_client
            .build_url(
                &format!(
                    "/v1/image-projects/{}", crate ::core::params::format_string_param(&
                    request.id)
                ),
            );
        let mut builder = reqwest::Client::default().get(&url);
        builder = builder.header("x-sideko-sdk-language", "rust");
        builder = self.base_client.apply_auths_to_builder(builder, &["bearerAuth"]);
        let mut response = builder.send().await?;
        response = self.base_client.error_for_status(response).await?;
        crate::core::response::process_json::<
            crate::models::GetV1ImageProjectsIdResponse,
        >(response)
            .await
    }
}
